

# 📝 To-Do List App Overview

## ⚙️ Project Structure

```
todo-flask/
│── app.py       # main app (or app + routes split)
│── models.py    # Task model (id, title, done)
│── routes.py    # (if separated) all endpoints
│── templates/
│     ├── index.html  # main UI (list tasks, add task, buttons)
```

## 🔄 Flow

1. **User visits `/`**
   → `index()` route runs → fetches all `Task` objects from DB → passes to `index.html`.

2. **Add new task**

   * User types title in form → submits to `/add` (POST).
   * `add()` route creates a new `Task` in DB → redirects back to `/`.

3. **Mark as done**

   * User clicks “Done” → `/done/<id>` runs.
   * That updates the `done` field to `True` → saves to DB → reloads `/`.

4. **Delete task**

   * User clicks “Delete” → `/delete/<id>` runs.
   * That deletes the task from DB → reloads `/`.

---

## 🗂️ Diagram (To-Do List)

```
Browser (User)
   |
   |   (HTTP Request: GET/POST)
   v
Flask Routes (index, add, done, delete)
   |
   |   (SQLAlchemy ORM)
   v
Database (SQLite: tasks table)
   |
   |   (Query Results)
   v
Templates (index.html)
   |
   v
Browser (Rendered HTML)
```

---